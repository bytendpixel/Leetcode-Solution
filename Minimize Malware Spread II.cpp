class Solution {
public:
    struct Node {
        int val, index;
        Node* next;
        Node(const int& i): val(1), next(0),index(i) {};
    };
    Node* root(Node* node) {
        if (!node || !node->next) return node;
        while (node->next->next) node->next = node->next->next;
        return node->next;
    }
    void Merge(Node* a, Node* b) {
        a = root(a), b= root(b);
        if (a!=b) {
            b->val += a->val;
            a->next = b;
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<vector<int>> adj(n);
        vector<bool> init(graph.size(), 0);
        vector<Node*> roots(n);
        for (int i:initial) init[i] = true;
        for (int i = 0; i<n; i++) {
            roots[i] = new Node(i);
            if (init[i]) roots[i]->val = 0;
        }

        vector<int> deg(n, 0);
        for (int i = 0; i<n; i++) {
            for (int j = i+1; j<n;j++) {
                if (graph[i][j]) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                    if (!init[i] && !init[j]) {
                        Merge(roots[j], roots[i]);
                    }
                }
            }
        }
        for (int i:initial) {
            vector<bool> visited(n, 0);
            for (int j:adj[i]) 
                if (!visited[j]) {
                    int index = root(roots[j])->index;
                    deg[index]++;
                    visited[index] = true;
                }
        }
        int max = 0, index = initial[0];
        for (int i = 0; i<initial.size(); i++) {
            vector<bool> visited(n, 0);
            int count = 0;
            for (int j:adj[initial[i]]) 
                if (!visited[j]) {
                    Node* tmp = root(roots[j]);
                    if (deg[tmp->index]==1) count+=tmp->val;
                    visited[tmp->index] = true;
                }
            if (count>max) {
                max = count;
                index = initial[i];
            } else if (count == max && index>initial[i]) index = initial[i];
        }
        return index;
    }
};
